[{"path":"http://philchalmers.github.io/mirtCAT/articles/mirtCAT-vignettes.html","id":"mirtcat-vignette-files","dir":"Articles","previous_headings":"","what":"mirtCAT Vignette Files","title":"","text":"access examples, vignettes, exercise files generated knitr please visit link.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Phil Chalmers. Author, maintainer. Magnus Nordmo. Contributor.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"R. Philip Chalmers (2016). Generating Adaptive Non-Adaptive Test Interfaces Multidimensional Item Response Theory Applications. Journal Statistical Software, 71(5), 1-39. doi:10.18637/jss.v071.i05","code":"@Article{,   title = {Generating Adaptive and Non-Adaptive Test Interfaces for Multidimensional Item Response Theory Applications},   author = {R. Philip Chalmers},   journal = {Journal of Statistical Software},   year = {2016},   volume = {71},   number = {5},   pages = {1--39},   doi = {10.18637/jss.v071.i05}, }"},{"path":"http://philchalmers.github.io/mirtCAT/index.html","id":"mirtcat","dir":"","previous_headings":"","what":"Computerized Adaptive Testing with Multidimensional Item Response Theory","title":"Computerized Adaptive Testing with Multidimensional Item Response Theory","text":"Computerized Adaptive Testing Multidimensional Item Response Theory","code":""},{"path":"http://philchalmers.github.io/mirtCAT/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Computerized Adaptive Testing with Multidimensional Item Response Theory","text":"Provides tools generate HTML interface creating adaptive non-adaptive educational psychological tests using shiny package. Suitable applying unidimensional multidimensional computerized adaptive tests using item response theory methodology.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/index.html","id":"examples-and-evaluated-help-files","dir":"","previous_headings":"","what":"Examples and Evaluated Help Files","title":"Computerized Adaptive Testing with Multidimensional Item Response Theory","text":"Various examples worked help files compiled using knitr package generate HTML output, available wiki. User contributions welcome!","code":""},{"path":"http://philchalmers.github.io/mirtCAT/index.html","id":"installing-from-github","dir":"","previous_headings":"","what":"Installing from Github","title":"Computerized Adaptive Testing with Multidimensional Item Response Theory","text":"install development version package, use following code.","code":"#if not installed already on your computer, install devtools install.packages('devtools')  #load and install the package library('devtools') install_github('philchalmers/mirtCAT')  #reload the package library('mirtCAT')"},{"path":"http://philchalmers.github.io/mirtCAT/index.html","id":"bugs-and-questions","dir":"","previous_headings":"","what":"Bugs and Questions","title":"Computerized Adaptive Testing with Multidimensional Item Response Theory","text":"Bug reports always welcome preferred way address bugs Github ‘issues’. Feel free submit issues feature requests site, ’ll address ASAP. Also, questions package, IRT general, feel free create ‘New Topic’ mirt-package Google group. Cheers!","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/computeCriteria.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the values given the criteria and internal objects — computeCriteria","title":"Compute the values given the criteria and internal objects — computeCriteria","text":"function returns named vector evaluated criteria respective item test bank. names associated item number bank. Note criteria values returned maximum value always represents optimal item (e.g., maximum information). cases minimum value typically selected (e.g., minimum variance) values multiplied -1 turn maximization problem.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/computeCriteria.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the values given the criteria and internal objects — computeCriteria","text":"","code":"computeCriteria(   x,   criteria,   person = NULL,   test = NULL,   design = NULL,   subset = NULL,   info_mats = FALSE )"},{"path":"http://philchalmers.github.io/mirtCAT/reference/computeCriteria.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the values given the criteria and internal objects — computeCriteria","text":"x object class 'mirtCAT_design' returned mirtCAT function passing design_elements = TRUE criteria item selection criteria (see mirtCAT's criteria input) person (required x missing) internal person object. used customNextItem function defined test (required x missing) internal test object. used customNextItem function defined design (required x missing) internal design object. used customNextItem function defined subset integer vector indicating items included optimal search; default NULL includes possible items. allow first 10 items selected can modified subset = 1:10. useful administering multi-unidimensional CAT session unidimensional blocks clustered together smoother presentation. Useful using customNextItem function mirtCAT info_mats logical; one trait present test, respective information matricies returned instead scalar summary statistics (e.g., D-rule). TRUE return list matricies associated respective item","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/computeCriteria.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the values given the criteria and internal objects — computeCriteria","text":"vector criteria values respective item","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/computeCriteria.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the values given the criteria and internal objects — computeCriteria","text":"Chalmers, R., P. (2012). mirt: Multidimensional Item Response Theory Package R Environment. Journal Statistical Software, 48(6), 1-29. doi:10.18637/jss.v048.i06 Chalmers, R. P. (2016). Generating Adaptive Non-Adaptive Test Interfaces Multidimensional Item Response Theory Applications. Journal Statistical Software, 71(5), 1-39. doi:10.18637/jss.v071.i05","code":""},{"path":[]},{"path":"http://philchalmers.github.io/mirtCAT/reference/computeCriteria.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the values given the criteria and internal objects — computeCriteria","text":"Phil Chalmers rphilip.chalmers@gmail.com","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/computeCriteria.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the values given the criteria and internal objects — computeCriteria","text":"","code":"if (FALSE) { # \\dontrun{ # test defined in mirtCAT help file, first example CATdesign <- mirtCAT(df, mod, design_elements = TRUE)  computeCriteria(CATdesign, criteria = 'MI') computeCriteria(CATdesign, criteria = 'MEI')  } # }"},{"path":"http://philchalmers.github.io/mirtCAT/reference/createSessionName.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a unique GUI session name from a string of characters — createSessionName","title":"Create a unique GUI session name from a string of characters — createSessionName","text":"used mirtCAT create random session name shiny knows environment select objects multiple CAT sessions initialized.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/createSessionName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a unique GUI session name from a string of characters — createSessionName","text":"","code":"createSessionName(n = 30, datetime = TRUE)"},{"path":"http://philchalmers.github.io/mirtCAT/reference/createSessionName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a unique GUI session name from a string of characters — createSessionName","text":"n number upper/lower characters sample datetime logical; include current date/time function called string well? helps uniqueness generated string","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/createSessionName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a unique GUI session name from a string of characters — createSessionName","text":"list containing internal environmental components mirtCAT","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/createShinyGUI.html","id":null,"dir":"Reference","previous_headings":"","what":"Function returning an object used by shiny — createShinyGUI","title":"Function returning an object used by shiny — createShinyGUI","text":"function returns GUI setup results calling shinyApp. Primarily, useful hosting application publicly, https://www.shinyapps.io/. function mirtCAT_preamble must run function called. object executed calling runApp.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/createShinyGUI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function returning an object used by shiny — createShinyGUI","text":"","code":"createShinyGUI(ui = NULL, host_server = TRUE)"},{"path":"http://philchalmers.github.io/mirtCAT/reference/createShinyGUI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function returning an object used by shiny — createShinyGUI","text":"ui shiny UI function used define interface. NULL, default one used. See mirtCAT:::default_UI internal code host_server logical; createShinyGUI() used remote server executed locally? TRUE calls stopApp suppressed allow multiple sessions executed. Note FALSE gives behaviour GUI mirtCAT","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/createShinyGUI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function returning an object used by shiny — createShinyGUI","text":"Chalmers, R., P. (2012). mirt: Multidimensional Item Response Theory Package R Environment. Journal Statistical Software, 48(6), 1-29. doi:10.18637/jss.v048.i06 Chalmers, R. P. (2016). Generating Adaptive Non-Adaptive Test Interfaces Multidimensional Item Response Theory Applications. Journal Statistical Software, 71(5), 1-39. doi:10.18637/jss.v071.i05","code":""},{"path":[]},{"path":"http://philchalmers.github.io/mirtCAT/reference/createShinyGUI.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Function returning an object used by shiny — createShinyGUI","text":"Phil Chalmers rphilip.chalmers@gmail.com","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/createShinyGUI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function returning an object used by shiny — createShinyGUI","text":"","code":"if (FALSE) { # \\dontrun{  mirtCAT_preamble(df=df) runApp(createShinyGUI(host_server = FALSE), port = 8000) # run locally  person <- getPerson() summary(person)  runApp(createShinyGUI(), port = 8000) # for remote server hosting  } # }"},{"path":"http://philchalmers.github.io/mirtCAT/reference/extract.mirtCAT.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract elements from the internal person, test, and design objects — extract.mirtCAT","title":"Extract elements from the internal person, test, and design objects — extract.mirtCAT","text":"function extracts elements, well builds convenient elements, three internal person, design, test objects accessible customNextItem function definition (see mirtCAT details).","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/extract.mirtCAT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract elements from the internal person, test, and design objects — extract.mirtCAT","text":"","code":"extract.mirtCAT(x, what)"},{"path":"http://philchalmers.github.io/mirtCAT/reference/extract.mirtCAT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract elements from the internal person, test, and design objects — extract.mirtCAT","text":"x either person, design, test object defined customNextItem definition character vector extracting desired element (see Details section)","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/extract.mirtCAT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract elements from the internal person, test, and design objects — extract.mirtCAT","text":"Depending object supplied, following elements can extracted.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/extract.mirtCAT.html","id":"the-person-argument","dir":"Reference","previous_headings":"","what":"The 'person' argument","title":"Extract elements from the internal person, test, and design objects — extract.mirtCAT","text":"ID scalar value indicating ID participant     (generally needed Monte Carlo simulations) responses integer vector indicating items responded .    element pertains associated item location (e.g., responses[100] associated    100th item), NA item responded raw_responses form responses, pertaining observed responses     character vector items_in_bank integer vector indicating items administered yet     also valid candidates administration items_answered integer vector indicating order items responded thetas current ability/latent trait estimates given previously administered items thetas_SE current ability/latent trait standard error estimates given     previously administered items thetas_history history  ability/latent trait estimates thetas_SE_history history latent trait standard error estimates item_time form items_answered, pertaining amount time took     participant response item demographics data.frame containing (optional) prior survey information GUI interface clientData list useful information shiny's session$clientData","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/extract.mirtCAT.html","id":"the-design-argument","dir":"Reference","previous_headings":"","what":"The 'design' argument","title":"Extract elements from the internal person, test, and design objects — extract.mirtCAT","text":"items_not_scored integer vector indicating items included      scored test (experimental items) min_items minimum number items administer max_items maximum number items administer max_time maximum amount time alloted GUI met_SEM logical vector indicating whether SEM criteria met met_delta_thetas logical vector indicating whether delta_thetas criteria met met_classify logical vector indicating whether classify criteria met exposure exposure control elements form responses content content constraint information content_prop content proportions test_properties user-defined data.frame test-based properties person_properties user-defined data.frame person-based properties","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/extract.mirtCAT.html","id":"the-test-argument","dir":"Reference","previous_headings":"","what":"The 'test' argument","title":"Extract elements from the internal person, test, and design objects — extract.mirtCAT","text":"mo extract defined model mirt package. Afterward, users can use      extract.mirt function pull large number internal elements easy use","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/extract.mirtCAT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract elements from the internal person, test, and design objects — extract.mirtCAT","text":"Chalmers, R., P. (2012). mirt: Multidimensional Item Response Theory Package R Environment. Journal Statistical Software, 48(6), 1-29. doi:10.18637/jss.v048.i06 Chalmers, R. P. (2016). Generating Adaptive Non-Adaptive Test Interfaces Multidimensional Item Response Theory Applications. Journal Statistical Software, 71(5), 1-39. doi:10.18637/jss.v071.i05","code":""},{"path":[]},{"path":"http://philchalmers.github.io/mirtCAT/reference/extract.mirtCAT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract elements from the internal person, test, and design objects — extract.mirtCAT","text":"Phil Chalmers rphilip.chalmers@gmail.com","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/extract.mirtCAT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract elements from the internal person, test, and design objects — extract.mirtCAT","text":"","code":"if (FALSE) { # \\dontrun{  #example test set.seed(1234) nitems <- 25 itemnames <- paste0('Item.', 1:nitems) a <- matrix(rlnorm(nitems, .2, .3)) d <- matrix(rnorm(nitems)) dat <- simdata(a, d, 500, itemtype = 'dich') colnames(dat) <- itemnames mod <- mirt(dat, 1, verbose = FALSE, TOL = .01)  # simple math items questions <- answers <- character(nitems) choices <- matrix(NA, nitems, 5) spacing <- floor(d - min(d)) + 1 #easier items have more variation in the options  for(i in 1:nitems){   n1 <- sample(1:50, 1)   n2 <- sample(51:100, 1)   ans <- n1 + n2   questions[i] <- paste0(n1, ' + ', n2, ' = ?')   answers[i] <- as.character(ans)   ch <- ans + sample(c(-5:-1, 1:5) * spacing[i,], 5)   ch[sample(1:5, 1)] <- ans   choices[i, ] <- as.character(ch) }  df <- data.frame(Question=questions, Option=choices,    Type = 'radio', stringsAsFactors = FALSE) df$Answer <- answers  pat <- generate_pattern(mod, Theta = 0, df)  #------------------------------------------------ # administer items in sequence customNextItem <- function(person, design, test){    # browser()    items_left_2_choose_from <- extract.mirtCAT(person, 'items_in_bank')    min(items_left_2_choose_from) }  res <- mirtCAT(df, local_pattern=pat,    design = list(customNextItem=customNextItem)) summary(res)  #------------------------------------------------ # administer items in order, but stop after 10 items customNextItem <- function(person, design, test){    items_left_2_choose_from <- extract.mirtCAT(person, 'items_in_bank')    items_answered <- extract.mirtCAT(person, 'items_answered')    total <- sum(!is.na(items_answered))    ret <- if(total < 10) min(items_left_2_choose_from)      else return(NA)    ret }  res <- mirtCAT(df, local_pattern=pat,    design = list(customNextItem=customNextItem)) summary(res)  #------------------------------------------------ # using findNextItem() and stopping after 10 items  customNextItem <- function(person, design, test){    items_answered <- extract.mirtCAT(person, 'items_answered')    total <- sum(!is.na(items_answered))    ret <- NA    if(total < 10)       ret <- findNextItem(person=person, test=test, design=design, criteria = 'MI')    ret }  res <- mirtCAT(df, mod, local_pattern=pat, start_item = 'MI',   design = list(customNextItem=customNextItem)) summary(res)  # equivalent to the following res2 <- mirtCAT(df, mod, local_pattern=pat, start_item = 'MI',    criteria = 'MI', design = list(max_items = 10)) summary(res2)  } # }"},{"path":"http://philchalmers.github.io/mirtCAT/reference/findNextItem.html","id":null,"dir":"Reference","previous_headings":"","what":"Find next CAT item — findNextItem","title":"Find next CAT item — findNextItem","text":"function returns next item computerized adaptive, optimal assembly, shadow test. direction manipulation internal objects function used conjunction updateDesign customNextItem. Finally, raw input forms can used customNextItem function defined mirtCAT.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/findNextItem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find next CAT item — findNextItem","text":"","code":"findNextItem(   x,   person = NULL,   test = NULL,   design = NULL,   criteria = NULL,   objective = NULL,   subset = NULL,   all_index = FALSE,   ... )"},{"path":"http://philchalmers.github.io/mirtCAT/reference/findNextItem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find next CAT item — findNextItem","text":"x object class 'mirtCAT_design' returned mirtCAT function passing design_elements = TRUE person (required x missing) internal person object. used customNextItem function defined test (required x missing) internal test object. used customNextItem function defined design (required x missing) internal design object. used customNextItem function defined criteria item selection criteria (see mirtCAT's criteria input). specified value extract.mirtCAT(design, 'criteria') used objective vector values used optimization criteria passed lp(objective.). typically vector criteria values returned computeCriteria, however supplying criteria possible (e.g., minimize number items administered simply pass vector -1's) subset integer vector indicating items included optimal search; default NULL includes possible items. allow first 10 items selected can modified subset = 1:10. useful administering multi-unidimensional CAT session unidimensional blocks clustered together smoother presentation. Useful using customNextItem function mirtCAT all_index logical; return items instead just optimal? TRUE vector items returned instead optimal, items sorted according well fit criteria (e.g., first element optimal, followed second optimal, ). Note work selection criteria (e.g., 'seq' 'random') ... additional arguments passed lp","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/findNextItem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find next CAT item — findNextItem","text":"typically returns integer value indicating index next item selected   value NA indicate test terminated. However, see arguments   returned object descriptions","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/findNextItem.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find next CAT item — findNextItem","text":"numeric objective supplied next item computerized adaptive test found via integer solver searching maximum. raw input forms can used customNextItem function defined mirtCAT, requires definition constr_fun (see associated element mirtCAT details, well examples ). Can used 'Optimal Test Assembly', well 'Shadow Testing' designs (van der Linden, 2005), using lp function. objective supplied result follows typical maximum criteria standard adaptive tests.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/findNextItem.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find next CAT item — findNextItem","text":"Chalmers, R., P. (2012). mirt: Multidimensional Item Response Theory Package R Environment. Journal Statistical Software, 48(6), 1-29. doi:10.18637/jss.v048.i06 Chalmers, R. P. (2016). Generating Adaptive Non-Adaptive Test Interfaces Multidimensional Item Response Theory Applications. Journal Statistical Software, 71(5), 1-39. doi:10.18637/jss.v071.i05 van der Linden, W. J. (2005). Linear models optimal test design. Springer.","code":""},{"path":[]},{"path":"http://philchalmers.github.io/mirtCAT/reference/findNextItem.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find next CAT item — findNextItem","text":"Phil Chalmers rphilip.chalmers@gmail.com","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/findNextItem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find next CAT item — findNextItem","text":"","code":"if (FALSE) { # \\dontrun{  # test defined in mirtCAT help file, first example  # equivalent to criteria = 'MI' customNextItem <- function(design, person, test){    item <- findNextItem(person=person, design=design, test=test,                         criteria = 'MI')    item  }   set.seed(1) nitems <- 100 itemnames <- paste0('Item.', 1:nitems) a <- matrix(rlnorm(nitems, .2, .3)) d <- matrix(rnorm(nitems)) dat <- simdata(a, d, 500, itemtype = 'dich') colnames(dat) <- itemnames mod <- mirt(dat, 1, verbose = FALSE)  # simple math items questions <- answers <- character(nitems) choices <- matrix(NA, nitems, 5) spacing <- floor(d - min(d)) + 1 #easier items have more variation in the options  for(i in 1:nitems){  n1 <- sample(1:50, 1)  n2 <- sample(51:100, 1)  ans <- n1 + n2  questions[i] <- paste0(n1, ' + ', n2, ' = ?')  answers[i] <- as.character(ans)  ch <- ans + sample(c(-5:-1, 1:5) * spacing[i,], 5)  ch[sample(1:5, 1)] <- ans  choices[i, ] <- as.character(ch) }  df <- data.frame(Question=questions, Option=choices,                Type = 'radio', stringsAsFactors = FALSE)     response <- generate_pattern(mod, 1) result <- mirtCAT(mo=mod, local_pattern = response,                    design = list(customNextItem=customNextItem))                  ----------------------------------------------------------- # direct manipulation of internal objects CATdesign <- mirtCAT(df=df, mo=mod, criteria = 'MI', design_elements = TRUE)  # returns number 1 in this case, since that's the starting item findNextItem(CATdesign)  # determine next item if item 1 and item 10 were answered correctly CATdesign <- updateDesign(CATdesign, new_item = 1, new_response = 1) extract.mirtCAT(CATdesign$person, 'thetas') # updated thetas CATdesign <- updateDesign(CATdesign, new_item = 10, new_response = 1) extract.mirtCAT(CATdesign$person, 'thetas') # updated thetas again findNextItem(CATdesign) findNextItem(CATdesign, all_index = TRUE) # all items rank in terms of most optimal  #------------------------------------------------------------- ## Integer programming example (e.g., shadow testing)  # find maximum information subject to constraints #  sum(xi) <= 5               ### 5 or fewer items #  x1 + x2 <= 1               ### items 1 and 2 can't be together #  x4 == 0                    ### item 4 not included #  x5 + x6 == 1               ### item 5 or 6 must be included, but not both  # constraint function constr_fun <- function(design, person, test){    # left hand side constrains   #    - 1 row per constraint, and ncol must equal number of items   mo <- extract.mirtCAT(test, 'mo')   nitems <- extract.mirt(mo, 'nitems')   lhs <- matrix(0, 4, nitems)   lhs[1,] <- 1   lhs[2,c(1,2)] <- 1   lhs[3, 4] <- 1   lhs[4, c(5,6)] <- 1    # relationship direction   dirs <- c(\"<=\", \"<=\", '==', '==')    #right hand side   rhs <- c(5, 1, 0, 1)    #all together   constraints <- data.frame(lhs, dirs, rhs)   constraints }  CATdesign <- mirtCAT(df=df, mo=mod, design_elements = TRUE,                      design = list(constr_fun=constr_fun))  # MI criteria value associated with each respective item objective <- computeCriteria(CATdesign, criteria = 'MI')  # most optimal item, given constraints findNextItem(CATdesign, objective=objective)  # all the items which solve the problem findNextItem(CATdesign, objective=objective, all_index = TRUE)  ## within a customNextItem() definition the above code would look like # customNextItem <- function(design, person, test){ #   objective <- computeCriteria(person=person, design=design, test=test, #                                criteria = 'MI') #   item <- findNextItem(person=person, design=design, test=test, #                        objective=objective) #   item # }  } # }"},{"path":"http://philchalmers.github.io/mirtCAT/reference/generate.mirt_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a mirt object from population parameters — generate.mirt_object","title":"Generate a mirt object from population parameters — generate.mirt_object","text":"function generates mirt object known population parameters, passed mirtCAT running CAT applications.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/generate.mirt_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a mirt object from population parameters — generate.mirt_object","text":"","code":"generate.mirt_object(   parameters,   itemtype,   latent_means = NULL,   latent_covariance = NULL,   key = NULL,   min_category = rep(0L, length(itemtype)) )"},{"path":"http://philchalmers.github.io/mirtCAT/reference/generate.mirt_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a mirt object from population parameters — generate.mirt_object","text":"parameters matrix data.frame parameters corresponding model definitions listed mirt. row represents unique item, column names correspond respective parameter names. parameter relevant particular item/row use NA's placeholders itemtype character vector indicating type item parameters refer. See itemtype argument mirt. Note input used determine relevant item class rows parameters, therefore many inputs interchangeable (e.g., '2PL' generates internal model object '3PL'). single value provided items types assumed identical latent_means (optional) numeric vector used define population latent mean structure. default mean structure centered 0 vector latent_covariance (optional) matrix used define population variance-covariance structure latent traits. default relationship assumed orthogonal standard normal (.e., identity matrix) key scoring key required nested-logit models. See mirt details min_category value representing lowest category index. default 0, therefore response suitable first category 0, second 1, K - 1","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/generate.mirt_object.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate a mirt object from population parameters — generate.mirt_object","text":"Chalmers, R., P. (2012). mirt: Multidimensional Item Response Theory Package R Environment. Journal Statistical Software, 48(6), 1-29. doi:10.18637/jss.v048.i06 Chalmers, R. P. (2016). Generating Adaptive Non-Adaptive Test Interfaces Multidimensional Item Response Theory Applications. Journal Statistical Software, 71(5), 1-39. doi:10.18637/jss.v071.i05","code":""},{"path":[]},{"path":"http://philchalmers.github.io/mirtCAT/reference/generate.mirt_object.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate a mirt object from population parameters — generate.mirt_object","text":"Phil Chalmers rphilip.chalmers@gmail.com","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/generate.mirt_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a mirt object from population parameters — generate.mirt_object","text":"","code":"if (FALSE) { # \\dontrun{  ### build a unidimensional test with all 3PL items  nitems <- 50 a1 <- rlnorm(nitems, .2,.2) d <- rnorm(nitems) g <- rbeta(nitems, 20, 80)  pars <- data.frame(a1=a1, d=d, g=g) head(pars)  obj <- generate.mirt_object(pars, '3PL') coef(obj, simplify = TRUE) plot(obj, type = 'trace')  ### build a two-dimensional test   ## all graded items with 5 response categories  nitems <- 30 as <- matrix(rlnorm(nitems*2, .2, .2), nitems) diffs <- t(apply(matrix(runif(nitems*4, .3, 1), nitems), 1, cumsum))  diffs <- -(diffs - rowMeans(diffs))  ds <- diffs + rnorm(nitems) pars2 <- data.frame(as, ds) colnames(pars2) <- c('a1', 'a2', paste0('d', 1:4)) head(pars2)  obj <- generate.mirt_object(pars2, 'graded') coef(obj, simplify = TRUE)  ### unidimensional mixed-item test  library(plyr) pars3 <- rbind.fill(pars, pars2) #notice the NA's where parameters do not exist obj <- generate.mirt_object(pars3, itemtype = c(rep('2PL', 50), rep('graded', 30))) coef(obj) itemplot(obj, 51) itemplot(obj, 1, drop.zeros=TRUE)  } # }"},{"path":"http://philchalmers.github.io/mirtCAT/reference/generate_pattern.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a CAT patterns — generate_pattern","title":"Generate a CAT patterns — generate_pattern","text":"Generate CAT pattern given various inputs. Returns character vector numeric matrix (depending whether df input supplied) columns equal test size rows equal number rows Theta. simulation studies, supplying Theta input 1 row generate matrix responses running independent CAT session passed mirtCAT(..., local_pattern). returned object integer vector Theta values stored attribute 'Theta' automatically used Monte Carlo simulations.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/generate_pattern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a CAT patterns — generate_pattern","text":"","code":"generate_pattern(mo, Theta, df = NULL)"},{"path":"http://philchalmers.github.io/mirtCAT/reference/generate_pattern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a CAT patterns — generate_pattern","text":"mo single group object defined mirt package Theta numeric vector indicating latent theta values single person df (optional) data.frame object containing questions, options, scoring keys. See mirtCAT details","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/generate_pattern.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate a CAT patterns — generate_pattern","text":"Chalmers, R., P. (2012). mirt: Multidimensional Item Response Theory Package R Environment. Journal Statistical Software, 48(6), 1-29. doi:10.18637/jss.v048.i06 Chalmers, R. P. (2016). Generating Adaptive Non-Adaptive Test Interfaces Multidimensional Item Response Theory Applications. Journal Statistical Software, 71(5), 1-39. doi:10.18637/jss.v071.i05","code":""},{"path":[]},{"path":"http://philchalmers.github.io/mirtCAT/reference/generate_pattern.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate a CAT patterns — generate_pattern","text":"Phil Chalmers rphilip.chalmers@gmail.com","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/generate_pattern.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a CAT patterns — generate_pattern","text":"","code":"if (FALSE) { # \\dontrun{  # return real response vector given choices and (optional) answers  pat <- generate_pattern(mod, Theta = 0, df=df) # mirtCAT(df, mo=mod, local_pattern = pat)  # generate single pattern observed in dataset used to define mod pat2 <- generate_pattern(mod, Theta = 0) # mirtCAT(mo=mod, local_pattern = pat2)  # generate multiple patterns to be analyzed independently  pat3 <- generate_pattern(mod, Theta = matrix(c(0, 2, -2), 3)) # mirtCAT(mo=mod, local_pattern = pat3)  } # }"},{"path":"http://philchalmers.github.io/mirtCAT/reference/getPerson.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve person object after running createShinyGUI — getPerson","title":"Retrieve person object after running createShinyGUI — getPerson","text":"function returns suitable person object identical result returned mirtCAT, required GUI launched createShinyGUI method.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/getPerson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve person object after running createShinyGUI — getPerson","text":"","code":"getPerson()"},{"path":"http://philchalmers.github.io/mirtCAT/reference/getPerson.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Retrieve person object after running createShinyGUI — getPerson","text":"Chalmers, R., P. (2012). mirt: Multidimensional Item Response Theory Package R Environment. Journal Statistical Software, 48(6), 1-29. doi:10.18637/jss.v048.i06 Chalmers, R. P. (2016). Generating Adaptive Non-Adaptive Test Interfaces Multidimensional Item Response Theory Applications. Journal Statistical Software, 71(5), 1-39. doi:10.18637/jss.v071.i05","code":""},{"path":[]},{"path":"http://philchalmers.github.io/mirtCAT/reference/getPerson.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Retrieve person object after running createShinyGUI — getPerson","text":"Phil Chalmers rphilip.chalmers@gmail.com","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/getPerson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve person object after running createShinyGUI — getPerson","text":"","code":"if (FALSE) { # \\dontrun{  mirtCAT_preamble(df=df) runApp(createShinyGUI(), port = 8000)  person <- getPerson() summary(person) } # }"},{"path":"http://philchalmers.github.io/mirtCAT/reference/get_mirtCAT_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the internal working environment state during mirtCAT session — get_mirtCAT_env","title":"Get the internal working environment state during mirtCAT session — get_mirtCAT_env","text":"function used access internal state mirtCAT GUI session. useful designing customized GUI using shinyGUI$ui input mirtCAT.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/get_mirtCAT_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the internal working environment state during mirtCAT session — get_mirtCAT_env","text":"","code":"get_mirtCAT_env(sessionName)"},{"path":"http://philchalmers.github.io/mirtCAT/reference/get_mirtCAT_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the internal working environment state during mirtCAT session — get_mirtCAT_env","text":"sessionName name session defined mirtCAT","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/get_mirtCAT_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the internal working environment state during mirtCAT session — get_mirtCAT_env","text":"list containing internal environmental components mirtCAT","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Computerized Adaptive Testing with Multidimensional Item Response Theory — mirtCAT-package","title":"Computerized Adaptive Testing with Multidimensional Item Response Theory — mirtCAT-package","text":"Computerized Adaptive Testing Multidimensional Item Response Theory","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computerized Adaptive Testing with Multidimensional Item Response Theory — mirtCAT-package","text":"Provides tools generate HTML interface creating adaptive non-adaptive educational psychological tests using shiny package. Suitable applying unidimensional multidimensional computerized adaptive tests using item response theory methodology creating simple questionnaires forms collect response data directly R. Users interested recent version package can visit https://github.com/philchalmers/mirtCAT follow instructions installing package source (additional details installing Github can found https://github.com/philchalmers/mirt). Questions regarding package can sent mirt-package Google Group, located https://groups.google.com/forum/#!forum/mirt-package.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Computerized Adaptive Testing with Multidimensional Item Response Theory — mirtCAT-package","text":"Chalmers, R., P. (2012). mirt: Multidimensional Item Response Theory Package R Environment. Journal Statistical Software, 48(6), 1-29. doi:10.18637/jss.v048.i06 Chalmers, R. P. (2016). Generating Adaptive Non-Adaptive Test Interfaces Multidimensional Item Response Theory Applications. Journal Statistical Software, 71(5), 1-39. doi:10.18637/jss.v071.i05","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Computerized Adaptive Testing with Multidimensional Item Response Theory — mirtCAT-package","text":"Phil Chalmers rphilip.chalmers@gmail.com","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an adaptive or non-adaptive test HTML interface — mirtCAT","title":"Generate an adaptive or non-adaptive test HTML interface — mirtCAT","text":"Provides tools generate HTML interface creating adaptive non-adaptive educational psychological tests using shiny package. Suitable applying unidimensional multidimensional computerized adaptive tests using item response theory methodology. Test scoring performed using mirt package. However, scoring required (.e., standard survey) defining mirt object may omitted.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an adaptive or non-adaptive test HTML interface — mirtCAT","text":"","code":"mirtCAT(   df = NULL,   mo = NULL,   method = \"MAP\",   criteria = \"seq\",   start_item = 1,   local_pattern = NULL,   AnswerFuns = list(),   design_elements = FALSE,   cl = NULL,   progress = FALSE,   primeCluster = TRUE,   customTypes = list(),   design = list(),   shinyGUI = list(),   preCAT = list(),   ... )  # S3 method for class 'mirtCAT' print(x, ...)  # S3 method for class 'mirtCAT' summary(object, sort = TRUE, ...)  # S3 method for class 'mirtCAT' plot(   x,   pick_theta = NULL,   true_thetas = TRUE,   SE = 1,   main = NULL,   par.strip.text = list(cex = 0.7),   par.settings = list(strip.background = list(col = \"#9ECAE1\"), strip.border = list(col =     \"black\")),   scales = list(x = list(rot = 90)),   ... )"},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an adaptive or non-adaptive test HTML interface — mirtCAT","text":"df data.frame containing character vector inputs required generate   GUI questions shiny. factors supplied instead character vectors   inputs coerced using .character() function (set   stringsAsFactors = FALSE defining data.frame avoid ).   row object corresponds unique   item. object supports follow column name combinations inputs specify   type response format, questions, options, answers, stems:  Type Indicates type response input       use shiny package. supported types : 'radio' radio buttons       (radioButtons), 'select' pull-box selecting       inputs (selectInput), 'rankselect' set pull-boxes rank-ordering       inputs (selectInput) associated option supplied,       'text' 'textArea' requiring       typed user input (textInput textAreaInput),       'checkbox' allowing multiple       responses checked (checkboxGroupInput),       'slider' generating slider inputs (sliderInput),       'none' presenting item stem selection options. Note slider       inputs require additional arguments passed; see ... instructions ). Additionally, types sufficient desired output users       can create response formats inputs via customTypes list input       (see ). E.g., function name 'MyTableQuestion' supplied       customTypes supplying type df use function       respective item. Note advanced requires working knowledge shiny's       design, inputs, specifications. generally advanced users       use -per-needed basis. Question character vector containing questions stems generated.       default character vectors passed HTML, therefore allow       HTML tags included directly. example, following example defines two stems,       second uses emphasis tag provide italics. Question = c('first item stem.', '<em>second<\/em> item stem.')) Alternatively, tag constructor function preferred need wrapped within       final call .character coerce shiny.tag expressions suitable       character vectors HTML code. example, expressed Question = c('first item stem.',          .character(div('', em('second'), 'item stem.'))) Moreover, input must character vector, use sapply       concert .character can apply conversion elements (often       redundantly). example format:   Option.# Names pertaining possible response       options item, # corresponds specific category.       instance, test 4 unique response options item contain       columns (Option.1, Option.2, Option.3, Option.4).       , however, items fewer categories others NA's can used response       options apply. Answer Answer.# (Optional) character vector (multiple character       vectors) indicating scoring key items correct answer(s).       correct answer question value NA must declared. Note 'scoring' item response data can ambiguous depending stimuli provided,       requires greater attention. example, using 'rankselect': partial scoring       used ranks mostly correct; partial scoring used response       ranking constant (e.g., correct rank 1-2-3-4-5, respondent ranks 2-3-4-5-1,       case four relative rankings correct 1 incorrect); 0-1 scoring used indicate none-correct?.       type ambiguity exists multiple-answers cases strongly recommended       use AnswerFuns argument instead better functional control Forced (Optional) logical vector indicating whether respondent      forced (TRUE) (FALSE) include response respective item.      omitted df definition automatically set TRUE      item. surveys, generally recommended set FALSE      allow respondents ability answer questions may uncomfortable answering Stem (Optional) character vector absolute relative paths       pointing external markdown (.md) HTML (.html) files used item stems.       NAs used item corresponding file. Timer (Optional) numeric vector indicating time limit (seconds)       respective item. response provided limit question       automatically advance next selected item. values NA Inf       indicate time limit respective items. Note option can used       df$Forced = TRUE Mastery (Optional) logical vector indicating whether item must mastered       prior continuing. Naturally, requires one Answers provided,       suitable functions scoring supplied HTMLOptions (Optional) logical vector indicating whether respective       Option.# terms wrapped within HTML function rendered        suitable shiny inputs (e.g., radio buttons). short-hand wrapper        flexible choiceNames approach, can used wrap option inputs alternative        functions. ... cases 'slider' inputs used instead       Question input required along (minimum)       min, max, step column. rows Type == 'slider'       column names correspond input arguments sliderInput.       input column options step, round, pre, post,       ticks, inline, placeholder, width, size       also supported respective input types. mo single group object defined mirt::mirt() function. required test scored adaptively non-adaptively, required general questionnaires. object can constructed using generate.mirt_object function population parameters known including calibrated model estimated mirt function real data. method argument passed mirt::fscores() computing new scores CAT stage, addition 'fixed' input keep latent trait estimates fixed previous values. method = 'ML', variability given response pattern CAT (.e., participant responding completely correctly completely incorrectly) method temporarily set MAP sufficient response variability present. Default 'MAP' criteria adaptive criteria used, default administer item sequentially   using criteria = 'seq'. Possible inputs unidimensional adaptive tests include: 'MI' maximum   information, 'MEPV' minimum expected posterior variance,   'MLWI' maximum likelihood weighted information,   'MPWI' maximum posterior weighted information, 'MEI'   maximum expected information, 'IKLP' well 'IKL'   integration based Kullback-Leibler criteria without prior density weight,   respectively, root-n items administered weighted counter-parts, 'IKLn'   'IKLPn'. Possible inputs multidimensional adaptive tests include: 'Drule'   maximum determinant information matrix, 'Trule'   maximum (potentially weighted) trace information matrix,   'Arule' minimum (potentially weighted) trace asymptotic covariance matrix,   'Erule'  minimum value information matrix, 'Wrule'   weighted information criteria. rules, posterior weight   latent trait scores can also included 'DPrule', 'TPrule',   'APrule', 'EPrule', 'WPrule', respectively. Applicable unidimensional multidimensional tests   'KL' 'KLn' point-wise Kullback-Leibler divergence   point-wise Kullback-Leibler decreasing delta value (delta*sqrt(n),   n number items previous answered), respectively.   delta criteria defined design object Non-adaptive methods applicable even mo object passed   : 'random' randomly select items, 'seq' selecting   items sequentially. start_item two possible inputs determine starting item available. Passing number indicate specific item used start item; default 1, selects first item defined test/survey. character string passed item selected one item selections criteria available (see criteria argument). -line runs local_pattern input used vector numbers/characters may supplied associated row response vector local_pattern character/numeric matrix response patterns used run CAT application without generating GUI interface. option requires complete response pattern(s) supplied. local_pattern required numeric questions supplied, responses must within valid range defined mo object. Otherwise, must contain character values plausible responses corresponds answer key /options supplied df. object contains attribute 'Theta' values stored within respective returned objects. See generate_pattern generate response patterns Monte Carlo simulations AnswerFuns list length equal number items item bank consisting user-defined functions. functions used determine whether given response obtained GUI 'correct' 'incorrect' returning logical scalar value, NA's must used indicate AnswerFuns used given item. Note AnswerFuns given priority answers provided df, therefore answers provided df entirely ignored. example, following provides customized response function first item. design_elements logical; return object containing test, person, design elements? Primarily used findNextItem function cl object definition passed parallel package (see ?parallel::parLapply details). defined, nrow(local_pattern) > 1, row run parallel help decrease estimation times simulation work progress logical; print progress bar console pbapply package given response patterns? Useful gauging long Monte Carlo simulations take finish primeCluster logical; cl object supplied, cluster primed first running simulations parallel? Setting TRUE ensure using cluster optimal every time new cl defined. Default TRUE customTypes optional list input containing functions Designing Original Graphical Stimuli (DOGS). DOGS elements input list must contain unique name, item associated must declared df$Type input. functions defined must form must return, minimum, associated shiny input object makes use inputId argument (e.g., radioButtons). valid shiny object can returned, including lists shiny objects. well, df_row argument contains extra information users wishes obtain associated row df object. following simple example DOGS true-false question passed: IMPORTANT: using custom inputs select defined Type must unique, even function defined (e.g., good_dog ) recycled. Hence, two items use good_dog function df defined something like df$Type <- c('Doug1', 'Doug2') associated customTypes = list(Doug1=good_dog, Doug2=good_dog) design list design based control parameters adaptive non-adaptive tests.   can min_SEM Default rep(0.3, nfact); minimum standard error measurement     reached latent traits (thetas) test stopped. test     multidimensional, either single value vector values may supplied provide     SEM criteria values dimension delta_thetas Default rep(0, nfact); stopping criteria based change latent     trait values (e.g., change theta = 1.5 theta = 1.54     stop CAT delta_thetas = 0.05). default disables stopping criteria thetas.start numeric vector starting values theta parameters      (default rep(0, nfact)) matrix N rows nfact columns, N      equal nrow(local_pattern) min_items minimum number items must answered     test stopped. Default 1 max_items maximum number items     can answered. Default length item bank max_time maximum time allowed generated GUI, measured     seconds. instance, test stop 10 minutes number     600 passed (10 * 60). Default Inf, therefore time limit quadpts Number quadrature points used per dimension     integration (required). Default identical scheme fscores theta_range upper lower range theta     integration grid. Used conjunction quadpts generate equally spaced     quadrature grid. Default c(-6,6) allow_constrain_breaks logical; test allowed terminate     middle administering items (un)ordered testlet set specified     constraints? Default FALSE weights weights used criteria == 'Wrule', also     applied weighted trace functions T- -rules. default     weights latent dimensions equally. Default rep(1, nfact),     nfact number test dimensions KL_delta interval range used criteria = 'KL'     criteria = 'KLn'. Default 0.1 content optional character vector indicating type content measured     item. Must supplied conjunction content_prop content_prop optional named numeric vector indicating     distribution item content proportions. content vector must also supplied     indicate item content membership. instance, content contains three     possible item content domains 'Addition', 'Subtraction', 'Multiplication',     test contain approximately half multiplication quarter     addition subtraction, suitable input content_prop = c('Addition'=0.25, 'Subtraction'=0.25, 'Multiplication'=.5) Note content_prop must sum 1 order represent valid population     proportions. classify numeric vector indicating cut-value(s) classification     prior threshold. Default use classification scheme classify_CI numeric vector indicating confident intervals used     classify individuals values classify. Values must     0 1 (e.g., 0.95 gives 95% confidence interval) sprt_lower numeric vector indicating lower cut-value(s) classification     prior threshold using sequential probability ratio test.     Default use classification scheme sprt_upper numeric vector indicating upper cut-value(s) classification     prior threshold using sequential probability ratio test.     Default use classification scheme sprt_alpha numeric vector indicating lower-bound error rate     use SPRT. Default .05 sprt_beta numeric vector indicating upper-bound error rate     use SPRT. Default .05 exposure numeric vector specifying amount exposure control apply     successive item (length must equal number items). Note includes     first item well selection criteria specified, therefore specific first     item used first element exposure 1.     default uses exposure control. item exposure     greater 1 n optimal     criteria randomly sampled . instance,     exposure[5] == 3, criteria = 'MI', fifth item     selected remaining pool items top 3 candidate items demonstrating     largest information criteria sampled . Naturally, first last     elements exposure ignored since exposure control meaningless. elements exposure 0 1 Sympson-Hetter exposure     control method implemented. method, item administered     passes probability simulation experiment; otherwise, removed item pool.     Values closer 1 likely appear test, value closer 0     likely randomly discarded. constraints named list declaring various item selection constraints     particular item, list element vector item numbers. Unless otherwise stated,     multiple elements can declared (e.g., list(ordered = c(1:5), ordered = c(7:9))     perfectly acceptable). include:  not_scored declaring items can selected used            scoring CAT. primarily useful including experimental items            future CATs. one vector not_scored elements can supplied excluded items actually appear session            (useful re-testing participants already seen items).            one vector excluded elements can supplied independent declaring items never appear CAT session.            Use , example, item 1 item 10 similar questions            types therefore appear within session ordered one item selected CAT, administer            particular group items order according specified sequence unordered ordered, except items group selected            random group complete  customUpdateThetas advanced function form     customUpdateThetas <- function(design, person, test)     update ability/latent trait estimates throughout CAT (generally, scoring) session.     design, person, test     customNextItem.     latent trait terms updated directly person object,     ReferenceClasses type, therefore direct assignment object modify internal     elements. Hence, avoid manual modification users can pass latent trait estimates     respective standard errors associated person$Update_thetas(theta, theta_SE) function.     Note fscores() function can useful     capitalize estimation algorithms implemented mirt. example, minimal working function look like following (note use rbind()     append history terms person object):   customNextItem advanced function form     customNextItem <- function(design, person, test) use customized item selection     method. requires complex programming understanding mirtCATs internal elements,     recommended initially use browser understand state     input arguments. defined, not_scored input     optional constraints list ignored. Use wish program item selection techniques explicitly, though     can combined internal findNextItem function analogous inputs.     Function must return single integer value     indicating next item administer NA value indicate test     terminated. See extract.mirtCAT details extract manipulate     various internal elements required functional arguments constr_fun (WARNING: supplying function disable number heuristic     item selection constraints constraints list consequence; namely, list options     except \"not_scored\"). argument contains optional user-defined function form function(design, person, test)     returns data.frame containing left hand side, relationship, right hand side     constraints lp.     row corresponds constraint, number columns     equal number items plus 2. Note column names     returned data.frame object matter. example, say given test user wants add     constraint exactly 10 items     administered participants, items 1 2     included test. input defined definition corresponds constraints 1 * x1 + 1 * x2 + ... + 1 * xn = 10     1 * x1 + 1 * x2 + 0 * x3 + ... + 0 * xn <= 1 ,     x terms represent binary indicators respective item optimizer     searching . Given objective vector supplied findNextItem,     optimal 10 items selected satisfy two constraints, meaning     1) exactly 10 items administered, 2) either item 1 2     selected two items never appear test form (though neither forced     appear given test).     See findNextItem details examples test_properties user-defined data.frame object used     supplied customNextItem function. used define particular     properties inherent test items (e.g., whether experimental, particular     weighting scheme, used one particular group individuals, ).     number rows must equal number items item bank, row     corresponds respective item. input appears within internal design object     test_properties slot. person_properties user-defined data.frame object used     supplied customNextItem function. used define particular     properties inherent individuals participants (e.g., known grouping variable, age,     whether taken test (items took), ).     -line simulations, number rows must equal number participants.     input appears within internal design object person_properties slot;     Monte Carlo simulations, rows manually indexed using person$ID slot. shinyGUI list GUI based parameters -written. can title character string test title. Default     'mirtCAT' authors character string author names. Default     'Author survey'. input empty string ('') author     information omitted GUI instructions two part character vector indicating use GUI.     Default :  second part character vector provides name action button. itemtimer character string display item-timer clock. Default     'Item timer: ' incorrect character string display case failed response. Default     'answer provided incorrect. Please select alternative.' failpass character string display case failed password input. Default     'Incorrect Login Name/Password. Please try (%s attempts remaining).' timemsg three part character vector indicating words hour, minute, second & . Default     c('hour ','minutes ','seconds ', '') firstpage first page shiny GUI. Default prints title     information message.  empty list passed, page skipped. begin_message Text display page prior beginning CAT. Default      \"Click action button begin.\" scored tests whereby mo object include,      default \"\" non-scored tests (disables page). demographics person information page used GUI collecting     demographic information, generated using tools shiny package. example,     following code asks participants Gender:  default, demographics page included.  demographics_inputIDs character vector required custom demographics     input used. Default demographics_inputIDs = 'gender', corresponding     demographics default stem_default_format shiny function used stems items. Default uses     HTML wrapper, allowing HTML tags included directly character vector     definitions. change something different, like h5 example,     pass stem_default_format = shiny::h5 shinyGUI list temp_file character vector indicating temporary .rds file     containing response information saved GUI running.     object saved item successfully completed. used     save response information hard drive case power outages     unexpected computer restarts. NULL, temp file created. Upon completion test,     temp file deleted. file already exists, however, used     resume GUI last location session interrupted lastpage function printing last message, indicating test completed     (.e., criteria met). function requires exactly one argument (called person),     input argument person object updated throughout test. default function   css character string defining CSS elements modify GUI presentation      elements. input string passed argument tags$style(HTML(shinyGUI$css))      prior constructing user interface theme character definition shinytheme package globally change      GUI theme choiceNames list containing choiceNames input respective item      input 'radio' 'checkbox' (see radioButtons),      element list instructions. used modify output controllers using      suitable HTML code. row df customized names supplying      value NULL associated list element use standard inputs instead.      Alternatively, specified names elements list can used match      rownames df object avoid use NULL placeholders choiceValues associated values used along choiceNames (see ) time_before_answer numeric value representing number seconds must elapsed      df$Forced = FALSE response can provided skipped. used      control accidental skips items responses forced. Default 1, indicating      one full second password data.frame object indicating user name (optional) password      required prior beginning CAT. Possible options User Information single row data.frame. column supplied case associated          suitable password individuals. Naturally, 1 column defined          1 global password users User Information Pairing multi-row data.frame first column          represents user name columns first option.          E.g., two users ('name1' 'name2')          given password '1234'          password = data.frame(User = c('user1', 'user2'), Password = rep('1234', 2))  response_msg string print valid responses required users provide      valid input. Default \"Please provide suitable response\" ui shiny UI function used define interface. NULL,      default one used. See mirtCAT:::default_UI internal code definition preCAT list object can used specify pre-CAT block   different test properties may applied prior beginning CAT session.   list empty, preCAT block used. following elements required   use preCAT input:  min_items minimum number items administer CAT session begins.       Default 0 max_items max number items administer CAT session begins.       input greater 0 required run preCAT stage criteria selection criteria (see ). Default 'random' method estimation criteria (see ). generally recommended       select method can deal --none response patterns, 'EAP',       'MAP', 'WLE'. Default 'MAP' response_variance logical; terminate preCAT stage variability       response pattern (.e., maximum-likelihood estimation contains potential optimum)?       Default FALSE ... additional arguments passed mirt, fscores, runApp, lattice x object class 'mirtCAT' object object class 'mirtCAT' sort logical; sort response patterns based order administered? FALSE, raw response patterns containing NAs returned items administered pick_theta number indicating theta plot (applicable multidimensional tests). default facet theta one plot, plot first factor pass pick_theta = 1 true_thetas logical; include horizontal line indicating population-level theta values ? applicable Monte Carlo simulations value known otherwise SE size standard errors plot. default 1, therefore plots standard error. obtain 95% interval use SE = 1.96 (z-distribution) main title plot. default 'CAT Standard Errors' 'CAT ##% Confidence Intervals' depending SE input par.strip.text plotting argument passed lattice par.settings plotting argument passed lattice scales plotting argument passed lattice","code":"Question = sapply(list('This is the first item stem.',                         div('This is the', em('second'), 'item stem.'),                         div('This is the', strong('third'), br(), br(), 'item stem.'),                         div('Fourth with some code:', code('obj <- 42'))),                     as.character) AnswerFuns <- as.list(rep(NA, nrow(df)))    AnswerFuns[[1]] <- function(input) input == '10' || to.lower(input) == 'ten' myDOGS <- function(inputId, df_row) ... good_dogs <- function(inputId, df_row){    return(list(h2('This statement is false'),                radioButtons(inputId = inputId, label='',                             choices = c('True', 'False'), selected = '')         ))    }  df <- data.frame(Question = '', ..., Type = 'Doug') results <- mirtCAT(df=df, customTypes = list(Doug = good_dogs)) myfun <- function(design, person, test){            mo <- extract.mirtCAT(test, 'mo')            responses <- extract.mirtCAT(person, 'responses')            tmp <- fscores(mo, response.pattern = responses)            person$Update_thetas(tmp[,'F1'],                                 tmp[,'SE_F1', drop=FALSE])            invisible()         } const_fun <- function(design, person, test){        nitems <- extract.mirt(test@mo, 'nitems')        lhs <- matrix(0, 2, nitems)        lhs[1, ] <- 1        lhs[2, c(1,2)] <- 1        data.frame(item=lhs, relation=c(\"==\", \"<=\"), value=c(10, 1))      } c(\"To progress through the interface, click on the action button below.\",        \"Next\") list(h1('Welcome to the mirtCAT interface'),               sprintf('The following interface was created using the mirtCAT package v               To cite the package use citation(\\'mirtCAT\\') in R.',                  packageVersion(\"mirtCAT\"))) list(selectInput(inputId = 'gender',                   label = 'Please select your gender.',                   choices = c('', 'Male', 'Female', 'Other'),                   selected = '')) function(person){                     return(list(h5(\"You have successfully completed the interface.                                    It is now safe to leave the application.\")))                      }"},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an adaptive or non-adaptive test HTML interface — mirtCAT","text":"Returns list object class 'Person' containing following elements: raw_responses character vector indicating raws responses respective     items, NA indicates item answered scored_responses integer vector scored responses item_answers input     used respective item items_answered integer vector indicating order items     answered thetas numeric vector indicating final theta estimates SE_thetas numeric vector indicating standard errors     final theta estimates thetas_history matrix indicating progression updating theta values     test thetas_SE_history matrix indicating standard errors theta     successive item answered item_time numeric vector indicating long respondent took answer     question (seconds) demographics data.frame object containing information collected     first page shiny GUI. used store demographic information     participant classification character vector indicating whether traits     classified '' '' desired cutoffs","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate an adaptive or non-adaptive test HTML interface — mirtCAT","text":"tests stop 'min_SEM' criteria reached classification specified cutoffs can made. questions answered, users specify extremely small 'min_SEM' , equivalently, large 'min_items' criteria design list input.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT.html","id":"html-help-files-exercises-and-examples","dir":"Reference","previous_headings":"","what":"HTML help files, exercises, and examples","title":"Generate an adaptive or non-adaptive test HTML interface — mirtCAT","text":"access examples, vignettes, exercise files generated knitr please visit https://github.com/philchalmers/mirtCAT/wiki.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT.html","id":"modifying-the-design-object-directly-through-customnextitem-advanced-","dir":"Reference","previous_headings":"","what":"Modifying the design object directly through customNextItem() (advanced)","title":"Generate an adaptive or non-adaptive test HTML interface — mirtCAT","text":"addition providing completely defined item-selection map via customNextItem() function, users may also wish control fine-grained elements design object adjust general control parameters CAT (e.g., modifying maximum number items administer, stopping CAT something peculiar detected response patterns, etc). Note feature rarely required applications, though advanced users may wish modify various low-level elements design object directly change flow CAT suit specific needs. person object defined Reference Class (see setRefClass) design object generally considered fixed S4 class, meaning , unlike person object, elements mutable. Therefore, order make changes directly design object users follow steps: Within defined customNextItem function, design object slots first modified (e.g.,     design@max_items <- 20L). Along desired next item scalar value customNextItem(), scalar object also     contain attribute name 'design' holds newly defined design object     (e.g., attr(ret, 'design') <- design; return(ret)). Following process work-flow mirtCAT use new design object place old one, even Monte Carlo simulations.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate an adaptive or non-adaptive test HTML interface — mirtCAT","text":"Chalmers, R., P. (2012). mirt: Multidimensional Item Response Theory Package R Environment. Journal Statistical Software, 48(6), 1-29. doi:10.18637/jss.v048.i06 Chalmers, R. P. (2016). Generating Adaptive Non-Adaptive Test Interfaces Multidimensional Item Response Theory Applications. Journal Statistical Software, 71(5), 1-39. doi:10.18637/jss.v071.i05 Chalmers, R., P. (2012). mirt: Multidimensional Item Response Theory Package R Environment. Journal Statistical Software, 48(6), 1-29. doi:10.18637/jss.v048.i06 Chalmers, R. P. (2016). Generating Adaptive Non-Adaptive Test Interfaces Multidimensional Item Response Theory Applications. Journal Statistical Software, 71(5), 1-39. doi:10.18637/jss.v071.i05 Chalmers, R., P. (2012). mirt: Multidimensional Item Response Theory Package R Environment. Journal Statistical Software, 48(6), 1-29. doi:10.18637/jss.v048.i06 Chalmers, R. P. (2016). Generating Adaptive Non-Adaptive Test Interfaces Multidimensional Item Response Theory Applications. Journal Statistical Software, 71(5), 1-39. doi:10.18637/jss.v071.i05 Chalmers, R., P. (2012). mirt: Multidimensional Item Response Theory Package R Environment. Journal Statistical Software, 48(6), 1-29. doi:10.18637/jss.v048.i06 Chalmers, R. P. (2016). Generating Adaptive Non-Adaptive Test Interfaces Multidimensional Item Response Theory Applications. Journal Statistical Software, 71(5), 1-39. doi:10.18637/jss.v071.i05","code":""},{"path":[]},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate an adaptive or non-adaptive test HTML interface — mirtCAT","text":"Phil Chalmers rphilip.chalmers@gmail.com","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an adaptive or non-adaptive test HTML interface — mirtCAT","text":"","code":"if (FALSE) { # \\dontrun{  ### unidimensional scored example with generated items  # create mo from estimated parameters set.seed(1234) nitems <- 50 itemnames <- paste0('Item.', 1:nitems) a <- matrix(rlnorm(nitems, .2, .3)) d <- matrix(rnorm(nitems)) dat <- simdata(a, d, 1000, itemtype = 'dich') mod <- mirt(dat, 1) coef(mod, simplify=TRUE)  # alternatively, define mo from population values (not run) pars <- data.frame(a1=a, d=d) mod2 <- generate.mirt_object(pars, itemtype='2PL') coef(mod2, simplify=TRUE)  # simple math items questions <- answers <- character(nitems) choices <- matrix(NA, nitems, 5) spacing <- floor(d - min(d)) + 1 #easier items have more variation in the options  for(i in 1:nitems){     n1 <- sample(1:50, 1)     n2 <- sample(51:100, 1)     ans <- n1 + n2     questions[i] <- paste0(n1, ' + ', n2, ' = ?')     answers[i] <- as.character(ans)     ch <- ans + sample(c(-5:-1, 1:5) * spacing[i,], 5)     ch[sample(1:5, 1)] <- ans     choices[i, ] <- as.character(ch) }  df <- data.frame(Question=questions, Option=choices,                                Type = 'radio', stringsAsFactors = FALSE) head(df)  (res <- mirtCAT(df)) #collect response only (no scoring or estimating thetas) summary(res)  # include scoring by providing Answer key df$Answer <- answers (res_seq <- mirtCAT(df, mod)) #sequential scoring  (res_random <- mirtCAT(df, mod, criteria = 'random')) #random (res_MI <- mirtCAT(df, mod, criteria = 'MI', start_item = 'MI')) #adaptive, MI starting item  summary(res_seq) summary(res_random) summary(res_MI)  #----------------------------------------- # HTML tags for better customization, coerced to characters for compatibility  # help(tags, package='shiny') options <- matrix(c(\"Strongly Disagree\", \"Disagree\", \"Neutral\", \"Agree\", \"Strongly Agree\"),                   nrow = 3, ncol = 5, byrow = TRUE) shinyStems <- list(HTML('Building CATs with mirtCAT is difficult.'),                div(HTML('mirtCAT requires a'), br(), HTML('substantial amount of coding.')),                div(strong('I would use'), HTML('mirtCAT in my research.'))) questions <- sapply(shinyStems, as.character) df <- data.frame(Question=questions,                  Option = options,                   Type = \"radio\",                  stringsAsFactors=FALSE)  res <- mirtCAT(df) res  #-----------------------------------------  # run locally, random response pattern given Theta set.seed(1) pat <- generate_pattern(mod, Theta = 0, df=df) head(pat)  # seq scoring with character pattern for the entire test (adjust min_items) res <- mirtCAT(df, mod, local_pattern=pat, design = list(min_items = 50))  summary(res)  # same as above, but using special input vector that doesn't require df input set.seed(1) pat2 <- generate_pattern(mod, Theta = 0) head(pat2) print(mirtCAT(mo=mod, local_pattern=pat2))  # run CAT, and save results to object called person (start at 10th item) person <- mirtCAT(df, mod, item_answers = answers, criteria = 'MI',                    start_item = 10, local_pattern = pat) print(person) summary(person)  # plot the session plot(person) #standard errors plot(person, SE=1.96) #95 percent confidence intervals  #-----------------------------------------  ### save response object to temp directory in case session ends early wdf <- paste0(getwd(), '/temp_file.rds') res <- mirtCAT(df, mod, shinyGUI = list(temp_file = wdf))  # resume test this way if test was stopped early (and temp files were saved) res <- mirtCAT(df, mod, shinyGUI = list(temp_file = wdf)) print(res)  } # }"},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT_preamble.html","id":null,"dir":"Reference","previous_headings":"","what":"Preamble function called by mirtCAT — mirtCAT_preamble","title":"Preamble function called by mirtCAT — mirtCAT_preamble","text":"largely internal function called mirtCAT, however made public better use external web-hosting interfaces (like shinyapps.io). information see https://shiny.rstudio.com/articles/persistent-data-storage.html information saving output remotely using shiny.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT_preamble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preamble function called by mirtCAT — mirtCAT_preamble","text":"","code":"mirtCAT_preamble(..., final_fun = NULL)"},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT_preamble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preamble function called by mirtCAT — mirtCAT_preamble","text":"... arguments passed mirtCAT final_fun function called just shiny GUI terminated, primarily saving results externally packages rDrop2, RAmazonS3, googlesheets, RMySQL, personal servers, applications hosted web. function must form final_fun <- function(person){...}, person standard output returned mirtCAT","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT_preamble.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Preamble function called by mirtCAT — mirtCAT_preamble","text":"Chalmers, R., P. (2012). mirt: Multidimensional Item Response Theory Package R Environment. Journal Statistical Software, 48(6), 1-29. doi:10.18637/jss.v048.i06 Chalmers, R. P. (2016). Generating Adaptive Non-Adaptive Test Interfaces Multidimensional Item Response Theory Applications. Journal Statistical Software, 71(5), 1-39. doi:10.18637/jss.v071.i05","code":""},{"path":[]},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT_preamble.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Preamble function called by mirtCAT — mirtCAT_preamble","text":"Phil Chalmers rphilip.chalmers@gmail.com","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/mirtCAT_preamble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preamble function called by mirtCAT — mirtCAT_preamble","text":"","code":"if (FALSE) { # \\dontrun{  mirtCAT_preamble(df = df)  } # }"},{"path":"http://philchalmers.github.io/mirtCAT/reference/updateDesign.html","id":null,"dir":"Reference","previous_headings":"","what":"Update design elements — updateDesign","title":"Update design elements — updateDesign","text":"function update object returned findNextItem. can used run CAT session manually set--step manner.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/updateDesign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update design elements — updateDesign","text":"","code":"updateDesign(x, new_item, new_response, updateTheta = TRUE)"},{"path":"http://philchalmers.github.io/mirtCAT/reference/updateDesign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update design elements — updateDesign","text":"x object class 'mirtCAT_design' returned mirtCAT function passing design_elements = TRUE new_item numeric vector indicating items select new_response numeric vector indicating responses selected items updateTheta logical; update internal ability terms new item response added internal objects?","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/updateDesign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update design elements — updateDesign","text":"returns object class 'mirtCAT_design' updated elements.","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/updateDesign.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Update design elements — updateDesign","text":"Chalmers, R., P. (2012). mirt: Multidimensional Item Response Theory Package R Environment. Journal Statistical Software, 48(6), 1-29. doi:10.18637/jss.v048.i06 Chalmers, R. P. (2016). Generating Adaptive Non-Adaptive Test Interfaces Multidimensional Item Response Theory Applications. Journal Statistical Software, 71(5), 1-39. doi:10.18637/jss.v071.i05","code":""},{"path":[]},{"path":"http://philchalmers.github.io/mirtCAT/reference/updateDesign.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Update design elements — updateDesign","text":"Phil Chalmers rphilip.chalmers@gmail.com","code":""},{"path":"http://philchalmers.github.io/mirtCAT/reference/updateDesign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update design elements — updateDesign","text":"","code":"if (FALSE) { # \\dontrun{  set.seed(1) nitems <- 100 itemnames <- paste0('Item.', 1:nitems) a <- matrix(rlnorm(nitems, .2, .3)) d <- matrix(rnorm(nitems)) dat <- simdata(a, d, 500, itemtype = 'dich') colnames(dat) <- itemnames mod <- mirt(dat, 1, verbose = FALSE)  # test defined in mirtCAT help file, first example CATdesign <- mirtCAT(mo = mod, criteria = 'MI', design_elements = TRUE,   start_item = 2)  # returns 2 in this case, since that was the starting item findNextItem(CATdesign)   # first iteration, no answered items CATdesign$person$items_answered  # update when next item is item 2 and answered correctly CATdesign <- updateDesign(CATdesign, new_item = 2, new_response = 1) CATdesign$person$items_answered  # item 2 answered first CATdesign$person$responses       # in item 2 element response was = 1  CATdesign$person$thetas # current estimate findNextItem(CATdesign)   # determine next item if item 70 were also answered correctly next CATdesign <- updateDesign(CATdesign, new_item = 70, new_response = 1) CATdesign$person$items_answered   CATdesign$person$responses        findNextItem(CATdesign)   # continue on, now with item 95 added next (answered incorrectly) CATdesign <- updateDesign(CATdesign, new_item = 95, new_response = 0) CATdesign$person$thetas CATdesign$person$thetas_history CATdesign$person$thetas_SE_history findNextItem(CATdesign)  } # }"},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"mirtcat-115","dir":"Changelog","previous_headings":"","what":"mirtCAT 1.15","title":"mirtCAT 1.15","text":"Changed $terminated_sucessfully $GUI_terminated_sucessfully avoid confusion, added terminated_early element person objects indicate whether CAT termination criteria resulted early termination","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"mirtcat-114","dir":"Changelog","previous_headings":"","what":"mirtCAT 1.14","title":"mirtCAT 1.14","text":"CRAN release: 2024-07-12 shinyGUI list’s forced_choice global specification mirtCAT() now deprecated favor including information df object. allows explicit selection items presented forced choice format (requested Levent mirt-package forum)","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"mirtcat-112","dir":"Changelog","previous_headings":"","what":"mirtCAT 1.12","title":"mirtCAT 1.12","text":"CRAN release: 2021-12-08 Added design information include sequential probability ratio test classification purposes. Currently limited unidimensional models Fix Fisher information bug unidimensional graded response model applications (reported Felix Fischer) New argument df$HTMLOptions added indicate whether Options.# inputs evaluated using HTML() first passed suitable constructor functions (requested John Manacup) df$Timer now printer respective item GUI, time runs item either replaced NA response marked “incorrect” one Answer elements present (requested Morten Nordmo)","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"mirtcat-110","dir":"Changelog","previous_headings":"","what":"mirtCAT 1.10","title":"mirtCAT 1.10","text":"CRAN release: 2020-07-10 Time remaining now reported real-time, now last ten minutes GUI session prints minutes seconds remaining Re-work updateDesign() function naturally move CAT session manually. Previous response selected item arguments now replaced new_response new_item, respectively, example documentation updated reflect change ordered unordered constraints longer stop middle testlet set, thereby ignoring stoping criteria (suggested Christoph König) choiceNames choiceValues inputs required additional unnaming (reported Ryan Kelley) three attempts allowed users required provide password (requested Aron Fi) createShinyGUI() now contains host_server logical argument indicate whether GUI hosted remote server locally. triggers whether shiny::stopApp() executed upon completion (servers executed avoid stopping app multiple users active) previously provided sessionName argument now removed favour handling feature back-end. helped patch bug related multiple instances GUI single server (reported Daniel Sommerhoff) thetas.start now accepts matrix input simulations different latent trait starting values. Note also affect start_item criteria well since optimal first item incorporate new starting trait location (requested Niek Frans)","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"mirtcat-193","dir":"Changelog","previous_headings":"","what":"mirtCAT 1.9.3","title":"mirtCAT 1.9.3","text":"CRAN release: 2019-06-28 Added element person objects results return GUI version mirtCAT() called clientData, pertains character vector information shiny’s session$clientData component (requested Felix Fischer Daniel Sommerhoff) Allow multiple CAT session run R session. primarily update users interested hosting mirtCAT single server multiple users can processed time Fix design_elements global dependency objects (reported Felix Fisher)","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"mirtcat-18","dir":"Changelog","previous_headings":"","what":"mirtCAT 1.8","title":"mirtCAT 1.8","text":"CRAN release: 2018-10-22 default wrapper Questions element df input now uses shiny::HTML rather previous shiny::p. allows HTML code naturally included, well use shiny tag constructor functions used concert .character(). deprecates previous df$StemExpressions format list inputs choiceValues choiceNames can accept named input elements match associated rownames df input avoid use placeholders final page splash screen now removes Next button avoid confusion (suggested Daniel Sommerhoff). Applications must explicitly closed now user, consequently stopApp logical shinyGUI list deprecated Fixed random item selection exposure control, selection suboptimal items instead (reported @machow Github) Type input text textArea forced_choice = TRUE blocks text input also now required. Otherwise, message printed GUI","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"mirtcat-17","dir":"Changelog","previous_headings":"","what":"mirtCAT 1.7","title":"mirtCAT 1.7","text":"CRAN release: 2018-03-11 message added red whenever selection conditions met (e.g., using forced choice, rating scale options, new mastery input) added optioanl Mastery input colum df prevent GUI continuing item answered correctly (useful CATs, supported teaching interfaces) added rankselect GUI input df$Type create list rank-orded selection options corresponding input options Fix bug using sequentially scored test without forced choice (reported Aron Fink)","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"mirtcat-16","dir":"Changelog","previous_headings":"","what":"mirtCAT 1.6","title":"mirtCAT 1.6","text":"add Timer option df intput set time limits select items iterative algorithms now use previous theta estimates starting values locating updated estimates fix selection bug using prior covariance matrix selection rules (reported Johan Braeken) computeCriteria() now respects subset argument (reported Johan Braeken)","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"mirtcat-15","dir":"Changelog","previous_headings":"","what":"mirtCAT 1.5","title":"mirtCAT 1.5","text":"CRAN release: 2017-05-04 new choiceNames choiceValues inputs shinyGUI list allow HTML stems radio buttons checkboxes (e.g., see new arguments help(radioButtons)) rotate x-axis 90 degrees plot() generic default start_item can now vector change starting item -line response pattern input Monte Carlo simulations fixed -line starting item set 'random', previously set participant’s start item (reported Okan Bulut) internal updating function person class avoid direct assignment customUpdateThetas() function","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"mirtcat-14","dir":"Changelog","previous_headings":"","what":"mirtCAT 1.4","title":"mirtCAT 1.4","text":"CRAN release: 2017-03-02 warning message slot included GUI results session terminated unexpectedly fix min items combination using preCAT list input (total min items now sum stages) fix scoping bug hosting GUI server (reported Murat Doğan ŞAHİN) tab closed early GUI session now calls stopApp() new customUpdateThetas function input design create map latent trait estimates updated throughout session. better expose internals, previous Update.thetas() function associated person class now available slot design internal object added subset info_mats computeCriteria() compute desired criteria item subsets return information matrices used compute criteria Drule, Trule, etc (requested Johan Braeken)","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"mirtcat-13","dir":"Changelog","previous_headings":"","what":"mirtCAT 1.3","title":"mirtCAT 1.3","text":"CRAN release: 2017-02-01 removed support list input df object place flexible format supports arbitrary creation user-defined item formats new customTypes argument. used conjunction df$Type input pair respective inputs added time_before_answer shinyGUI list include require number seconds wait valid/omitted response can accepted add textAreaInput support GUI include text-boxes possible inputs df$StemExpression now instead logical vector used indicate whether questions definition evaluated R first added AnswerFun input allow user-defined functions respective item determine whether answer provided correct incorrect. Mainly useful text-based items (suggested Anna Mikolajetz) added theme input shinyGUI support predefined themes “shinythemes” package","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"mirtcat-12","dir":"Changelog","previous_headings":"","what":"mirtCAT 1.2","title":"mirtCAT 1.2","text":"CRAN release: 2016-11-16 progress logical added mirtCAT() print progress Monte Carlo simulations pbapply package Shadow testing optimal test assembly designs supported adding constr_fun input mirtCAT() objective input findNextItem(). See findNextItem() documentation details examples computeCriteria() function added return criteria values (e.g., maximum information) associated respective item population-level Theta terms tracked internally Monte Carlo simulations generate_pattern() now stores respective population values silent attribute. now displayed summary/print/plot outputs, applicable allow internal design object modified customNextItem() function added extract.mirtCAT() function better document extract components person, design, test objects customNextItem(). Allows safer easier customization item selection maps new test_properties person_properties inputs design element allow prior information test/persons (e.g., selecting particular items based prior demographic information). Intended use customNextItem() function definition","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"mirtcat-11","dir":"Changelog","previous_headings":"","what":"mirtCAT 1.1","title":"mirtCAT 1.1","text":"CRAN release: 2016-09-09 added StemExpression df input support arbitrary R expressions stems rendered standard R code. Allows inputs audio, video, etc, well use suitable tags$FUN(...) new password input shinyGUI list allow login password gates. Useful hosting CAT server potentially sensitive items default shiny stem wrapper function df data.frame now exposed via stem_default_format input shinyGUI MathJax now explicitly supported item stems response options. , users can provide manual list explicitly defining shiny functions; however, data.frame object used stems/responses automatically wrapped within suitable shiny::withMathJax() function render output mental preparation screen now disabled non-scored tests mo object omitted (.e., equivalent setting shinyGUI = list(begin_message = \"\")) 'select' Type input df now uses blank option default avoid clicking accidentally. Also works better forced_choice default","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"mirtcat-10","dir":"Changelog","previous_headings":"","what":"mirtCAT 1.0","title":"mirtCAT 1.0","text":"CRAN release: 2016-07-26 released JSS publication","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"mirtcat-09","dir":"Changelog","previous_headings":"","what":"mirtCAT 0.9","title":"mirtCAT 0.9","text":"CRAN release: 2016-06-24 fix MLWI/MPWI selection criteria findNextItem() allowed return items given selection criteria","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"changes-in-mirtcat-08","dir":"Changelog","previous_headings":"","what":"Changes in mirtCAT 0.8","title":"Changes in mirtCAT 0.8","text":"CRAN release: 2016-02-24 include constraints option excluded items (useful re-testing situations item selection bank items previously answered items appear) new 'none' presentation Type allow empty material responses (mainly presenting reading passages testlet-based items). Useful used conjunction constraints input design list items predictable dependent pairings (can used customNextItem form well explicit dependencies) shinyGUI input gained ui element allow users completely customize graphical UI shiny code added customNextItem function allow completely customized method declaring item selection scheme support checkbox input type checkboxGroupInput() function. Supplying one answers score items partial credit style include missing input options df input shiny (e.g., width, placeholder, inline). Removed 'radio_inline' input can now accomplished passing Type = 'radio' inline = TRUE","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"changes-in-mirtcat-06","dir":"Changelog","previous_headings":"","what":"Changes in mirtCAT 0.6","title":"Changes in mirtCAT 0.6","text":"CRAN release: 2015-10-04 added getPerson() function assign person object following use createShinyGUI raw_responses vector returned participant now character vector instead integer added slider Type input sliderInput rating scale questions resume_file removed, now associated temp_file detected used resume GUI session new begin_message input shinyGUI change message prior starting CAT changed lastpage element shinyGUI input list function allow messages containing information pertaining session","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"changes-in-mirtcat-05","dir":"Changelog","previous_headings":"","what":"Changes in mirtCAT 0.5","title":"Changes in mirtCAT 0.5","text":"CRAN release: 2015-05-09 fix bug using SH exposure control pool runs items add delta_thetas argument design list stop CAT change latent trait updates less distance criteria include functions allow easier web hosting locations shinyapps.io. Namely, mirtCAT_preamble() createShinyGUI() graphical images (png, gif, jpeg) longer supported. Stems preferably HTML best results control Stem paths can now point render HTML markdown files GUI df input can now list including fine tuned shiny inputs check existence graphical item stems, allow relative absolute paths","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"bugfix-0-5","dir":"Changelog","previous_headings":"","what":"BUGFIX","title":"Changes in mirtCAT 0.5","text":"fix stem location bug, add better aspect ratio summary(mod, sort=FALSE) argument returned NULL object instead unsorted response. patched now tested df supplied, check responses plausible range (reported Gerard Flens)","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"changes-in-mirtcat-042","dir":"Changelog","previous_headings":"","what":"Changes in mirtCAT 0.4.2","title":"Changes in mirtCAT 0.4.2","text":"CRAN release: 2015-01-25 forced_choice argument shinyGUI input state whether response item required (CATs, always TRUE) response GUI now blank default preCAT list input change nitems min_items max_items better control. Also include response_variance logical terminate preCAT stage variability response options occurs (ML estimation becomes plausible) include Sympson-Hetter method item exposure control major re-write shiny inputs. Now questions, answers, options supplied data.frame object better clarity, shiny inputs regarding questions, image locations, etc, specified object mirt_object input renamed mo short local_pattern input now accepts matrix response patterns running simulation designs. Returns list person objects instead single object generate_pattern() now supports multiple Theta inputs specifically simulation designs start_item input now accepts character value inputs (addition explicit numeric inputs) corresponding criteria argument. allows first item selected using (adaptive) selection criteria added generate.mirt_object() function build required mirt_object input given population parameters new cl argument mirtCAT() passing parallel cluster object defined parallel package. Used run simulation designs parallel architecture better speed default, demographics page longer generated GUI","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"changes-in-mirtcat-03","dir":"Changelog","previous_headings":"","what":"Changes in mirtCAT 0.3","title":"Changes in mirtCAT 0.3","text":"CRAN release: 2014-12-15 item_answers can now list input, indicating one correct answer possible given item allow first page demographics page skipped passing empty list arguments added ‘fixed’ method keep latent trait estimates fixed values (useful preCAT) Fisher information matrix added remaining multidimensional models supported mirt, including custom item types add ‘Arule’ ‘APrule’ minimum trace criteria asymptotic covariance matrix","code":""},{"path":"http://philchalmers.github.io/mirtCAT/news/index.html","id":"changes-in-mirtcat-02","dir":"Changelog","previous_headings":"","what":"Changes in mirtCAT 0.2","title":"Changes in mirtCAT 0.2","text":"CRAN release: 2014-10-15 temporary files can now saved GUI running, restored later time estimation options can passed fscores() via … argument sensitive objects now removed package namespace mirtCAT() finishes unsuccessfully categories always returned based 1 first response GUI add content balancing option various bug fixes, update documentation new findNextItem() input users locate next item administer (likely custom CAT interfaces use Shiny package). Can updated updateDesign() function moved ‘Next’ button web interface left panel box always remain location support CSS customization switch multidimensional selection criteria use analytical expressions rather numerical. Several multivariate Fisher information matrix computation currently supported analytically, steadily added. add classification capabilities design list input","code":""}]
